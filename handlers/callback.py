from pickletools import bytes_types
from tkinter import Image

import asyncio
from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton

router = Router()

total_cards = 5
user_progress = {}
def keyboard_for_card(card_number:int):
    if card_number < total_cards:
        buttons = [InlineKeyboardButton(text="‚ñ∂Ô∏è –î–∞–ª–µ–µ>", callback_data=f"card_{card_number+1}")]
    else:
        buttons = [InlineKeyboardButton(text="‚úÖ –Ø –∑–∞–ø–æ–º–Ω–∏–ª, –¥–∞–≤–∞–π –¥–∞–ª—å—à–µ", callback_data="remembered")]
    return InlineKeyboardMarkup(inline_keyboard=[buttons])
def get_card_content(card_number:int):
    photos ={
        1 : "media/photo/1.jpg",
        2 : "media/photo/2.jpg",
        3 : "media/photo/3.jpg",
        4 : "media/photo/4.jpg",
        5 : "media/photo/5.jpg",
    }

    captions ={
        1: """üåì <b>–Ø ‚Äî –ì–µ–∫–∞—Ç–∞, –¢—Ä–∏–µ–¥–∏–Ω–∞—è –±–æ–≥–∏–Ω—è.</b>
        –Ø ‚Äî —é–Ω–∞—è –¥–µ–≤–∞, –∑—Ä–µ–ª–∞—è –∂–µ–Ω—â–∏–Ω–∞ –∏ —Å—Ç–∞—Ä–∞—è –≤–µ–¥—å–º–∞
        –°–∏–º–≤–æ–ª–∏–∑–∏—Ä—É—é <b>—Ç—Ä–∏ —Å—Ç–∞–¥–∏–∏ –∂–∏–∑–Ω–∏ –∏ —Ç—Ä–∏ —Ñ–∞–∑—ã –ª—É–Ω—ã</b>
        ‚û§ –†–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞ ‚Äî —ç—Ç–æ –Ω–∞—á–∞–ª–æ —Ç–≤–æ–µ–≥–æ –ø—É—Ç–∏.
        ‚û§ –ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ ‚Äî –ø–∏–∫ —Ç–≤–æ–µ–π —Å–∏–ª—ã.
        ‚û§ –°—Ç–∞—Ä–∞—è –õ—É–Ω–∞ ‚Äî —Ç–∞–π–Ω–∞ –∏ –º—É–¥—Ä–æ—Å—Ç—å, —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å –æ–ø—ã—Ç–æ–º.
        –Ø ‚Äî —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∏ —Ç–∞–π–Ω –º–µ–∂–¥—É –º–∏—Ä–∞–º–∏.
             """,
        2: """üóù <b>–ú–µ–Ω—è –ø–æ—á–∏—Ç–∞–ª–∏ –Ω–∞ –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–∞—Ö –∏ –≥—Ä–∞–Ω–∏—Ü–∞—Ö.</b>
        –Ø –æ—Ö—Ä–∞–Ω—è—é –ø–æ—Ä–æ–≥–∏ –º–µ–∂–¥—É –º–∏—Ä–∞–º–∏ ‚Äî –∑–µ–º–Ω—ã–º –∏ –ø–æ—Ç—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º.
        –ú–æ–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–∏–Ω–æ—Å–∏–ª–∏ –º–Ω–µ –∂–µ—Ä—Ç–≤—ã –Ω–∞ –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–∞—Ö –¥–æ—Ä–æ–≥ –∏ –≤–æ–∑–ª–µ –∫–ª–∞–¥–±–∏—â.
        –ú–æ–∏ —Å–∏–º–≤–æ–ª—ã ‚Äî –∫–ª—é—á–∏, —Ñ–∞–∫–µ–ª—ã –∏ —Å–æ–±–∞–∫–∏ ‚Äî –≤—Å–µ–≥–¥–∞ —Å–æ –º–Ω–æ–π.
        –Ø ‚Äî —Å—Ç—Ä–∞–∂ —Ç—å–º—ã –∏ —Å–≤–µ—Ç–∞, –∏ –º–æ–π —Å–≤–µ—Ç –≤–µ–¥—ë—Ç –≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ—Å—Ç—å.
                """,
        3: """<b>–°–º–æ—Ç—Ä–∏ –Ω–∞ –º–æ–∏ —Å–∏–º–≤–æ–ª—ã ‚Äî —è –≥–æ–≤–æ—Ä—é —á–µ—Ä–µ–∑ –Ω–∏—Ö.</b>
        –ú–æ–∏ —Ç—Ä–∏ —Å–æ–±–∞–∫–∏ ‚Äî –≤–µ—Ä–Ω—ã–µ —Å—Ç—Ä–∞–∂–∏, —á—Ç–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—Ç –º–µ–Ω—è.
        –§–∞–∫–µ–ª—ã –æ—Å–≤–µ—â–∞—é—Ç –ø—É—Ç—å –¥–∞–∂–µ –≤ —Å–∞–º–æ–π –≥—É—Å—Ç–æ–π —Ç—å–º–µ.
        –ö–ª—é—á–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –¥–≤–µ—Ä–∏, —á—Ç–æ —Å–∫—Ä—ã—Ç—ã –æ—Ç –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –≥–ª–∞–∑.
        –Ø ‚Äî —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –º–∞–≥–∏–∏, –∑–Ω–∞–Ω–∏–π –∏ –¥—Ä–µ–≤–Ω–∏—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤.
        """,
        4:  """<b>–Ø –∂–∏–≤—É –≤ –≥–ª—É–±–∏–Ω–∞—Ö —Ç–≤–æ–µ–≥–æ –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏—è.</b>
–Ø ‚Äî —Ç–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–≤–µ—Ç, —á—Ç–æ –æ—Å–≤–µ—â–∞–µ—Ç —Ç—ë–º–Ω—ã–µ —É–≥–æ–ª–∫–∏ –¥—É—à–∏.
–Ø –ø–æ–º–æ–≥–∞—é –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ —Å—Ç—Ä–∞—Ö, –∫—Ä–∏–∑–∏—Å—ã –∏ –ø–µ—Ä–µ–º–µ–Ω—ã.
–°–ª—É—à–∞–π –º–µ–Ω—è ‚Äî –∏ —Ç—ã –Ω–∞–π–¥—ë—à—å —Å–∏–ª—É –ø—Ä–∏–Ω—è—Ç—å —Ç–µ–Ω–∏ –∏ –æ–±—Ä–µ—Å—Ç–∏ –º—É–¥—Ä–æ—Å—Ç—å.
–Ø ‚Äî —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä—ã –Ω–µ–∏–∑–≤–µ–¥–∞–Ω–Ω–æ–≥–æ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–±—è.""",

    5:  """<b>–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–∏—Ö —Ç–∞–π–Ω –∏ –∏—Å—Ç–æ—Ä–∏–π.</b>
        1. –Ø ‚Äî –¥—Ä–µ–≤–Ω—è—è –±–æ–≥–∏–Ω—è, —á—å—ë –∏–º—è –∑–≤—É—á–∏—Ç —Å–∫–≤–æ–∑—å –≤–µ–∫–∞.
        2. –ú–æ—ë –ø–æ—á–∏—Ç–∞–Ω–∏–µ –∂–∏–≤–æ –¥–æ —Å–∏—Ö –ø–æ—Ä –≤ –º–∞–≥–∏–∏ –∏ –∫—É–ª—å—Ç—É—Ä–µ.
        3. –ú–µ–Ω—è –∑–æ–≤—É—Ç –≤ –Ω–æ—á–∏, –∫–æ–≥–¥–∞ –Ω—É–∂–µ–Ω —Å–æ–≤–µ—Ç –∏ –∑–∞—â–∏—Ç–∞.
        4. –Ø —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É—é –ø–µ—Ä–µ–º–µ–Ω—ã –∏ –≤–µ—á–Ω—ã–π —Ü–∏–∫–ª –∂–∏–∑–Ω–∏.
        5. –ú–æ–∏ —Ç–∞–π–Ω—ã –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è —Ç–µ–º, –∫—Ç–æ –≥–æ—Ç–æ–≤ –∏–¥—Ç–∏ –ø—É—Ç—ë–º —Ç–µ–Ω–∏.
        –°–ª–µ–¥—É–π –∑–∞ –º–Ω–æ–π ‚Äî –∏ –æ—Ç–∫—Ä–æ–µ—à—å –Ω–µ–∏–∑–≤–µ–¥–∞–Ω–Ω–æ–µ."""
    }

    return photos[card_number], captions[card_number]

questions = [
    {
        "question": "–°–∫–æ–ª—å–∫–æ –ª–∏–∫–æ–≤ —É –ì–µ–∫–∞—Ç—ã?",
        "options": ["–û–¥–∏–Ω", "–¢—Ä–∏", "–°–µ–º—å"],
        "correct": 1
    },
    {
        "question": "–ß—Ç–æ —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É—é—Ç —Ç—Ä–∏ —Ñ–∞–∑—ã –õ—É–Ω—ã —É –ì–µ–∫–∞—Ç—ã?",
        "options": ["–ñ–∏–∑–Ω–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã", "–°—Ç–∏—Ö–∏–∏ –ø—Ä–∏—Ä–æ–¥—ã", "–í—Ä–µ–º–µ–Ω–∞ –≥–æ–¥–∞"],
        "correct": 0
    },
    {
        "question": "–ì–¥–µ –ì–µ–∫–∞—Ç–µ –ø—Ä–∏–Ω–æ—Å–∏–ª–∏ –¥–∞—Ä—ã?",
        "options": ["–í —Ö—Ä–∞–º–∞—Ö –ê—Ñ–∏–Ω—ã", "–ù–∞ –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–∞—Ö", "–í –º–æ—Ä—Å–∫–∏—Ö –ø–µ—â–µ—Ä–∞—Ö"],
        "correct": 1
    },
    {
        "question": "–ö–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ì–µ–∫–∞—Ç–∞ –¥–µ—Ä–∂–∏—Ç –≤ —Ä—É–∫–∞—Ö?",
        "options": ["–ö–æ—Å—É –∏ —â–∏—Ç", "–§–∞–∫–µ–ª, –Ω–æ–∂ –∏ –∫–ª—é—á", "–ñ–µ–∑–ª –∏ –∫—É–±–æ–∫"],
        "correct": 1
    },
    {
        "question": "–ö–∞–∫—É—é —Ä–æ–ª—å –ì–µ–∫–∞—Ç–∞ –∏–≥—Ä–∞–µ—Ç –≤ –ø—Å–∏—Ö–∏–∫–µ —á–µ–ª–æ–≤–µ–∫–∞?",
        "options": [
            "–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç—å–º—É –±–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–≥–æ",
            "–°–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç —É—Å–ø–µ—Ö –∏ –∫–∞—Ä—å–µ—Ä—É",
            "–ó–∞—â–∏—â–∞–µ—Ç –æ—Ç –±–æ–ª–µ–∑–Ω–µ–π –∏ –≥–æ–ª–æ–¥–∞"
        ],
        "correct": 0
    }
]

async def send_question(message, user_id):
    question_index = user_progress[user_id]["current_question"]
    question_data = questions[question_index]
    user_progress[user_id]["attempts"] = 2

    buttons = [
        [InlineKeyboardButton(text=opt, callback_data=f"answer_{i}")] for i, opt in enumerate(question_data['options'])
    ]

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(f"<b>{question_data['question']}</b>", reply_markup=markup, parse_mode="HTML")


@router.callback_query(F.data == "start")
async def next_handler(callback: CallbackQuery):
    await callback.message.answer("""
    <b>–¢—ã —Å—Ç—É–ø–∏–ª –Ω–∞ –ø—É—Ç—å –¢–µ–Ω–∏.</b>
     –ß—Ç–æ–±—ã –æ–±—Ä–µ—Å—Ç–∏ —Å–∏–ª—É ‚Äî –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –∫–æ–≥–æ —Ç—ã –∑–æ–≤—ë—à—å.
    –Ø ‚Äî –ì–µ–∫–∞—Ç–∞. –ò —É –º–µ–Ω—è —Ç—Ä–∏ –ª–∏–∫–∞.
    –ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –æ–±—Ä–∞–∑—ã. –ü—Ä–æ—á—Ç–∏, –∑–∞–ø–æ–º–Ω–∏. –ü–æ—Ç–æ–º ‚Äî –¥–æ–∫–∞–∂–∏, —á—Ç–æ –≤–Ω–∏–º–∞–ª.
""", parse_mode="html")
    await callback.answer()
    await asyncio.sleep(2)

    card_number = 1
    photo_path, caption = get_card_content(card_number)
    photo = FSInputFile(photo_path)
    keyboard = keyboard_for_card(card_number)
    await callback.message.answer_photo(photo, caption=caption, parse_mode="html", reply_markup=keyboard)

@router.callback_query(F.data.startswith("card_"))
async def show_card(callback: CallbackQuery):
    card_number = int(callback.data.split("_")[1])
    photo_path, caption = get_card_content(card_number)
    photo = FSInputFile(photo_path)
    await callback.message.answer_photo(photo, caption=caption, parse_mode="HTML", reply_markup=keyboard_for_card(card_number))

@router.callback_query(F.data == "remembered")
async def remembered_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_progress[user_id] = {
        "current_question": 0,
        "correct_answers": 0,
        "attempts": 2
    }
    await callback.message.answer("""–û—Ç–ª–∏—á–Ω–æ! –¢–æ–≥–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—É—Ç—å‚Ä¶
                                  –ò –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è""")
    await callback.answer()
    await asyncio.sleep(2)
    await send_question(callback.message, user_id)


@router.callback_query(F.data.startswith("answer_"))
async def handle_answer(callback: CallbackQuery):
    user_id = callback.from_user.id
    selected = int(callback.data.split("_")[1])
    progress = user_progress[user_id]

    question_index = progress["current_question"]
    correct = questions[question_index]["correct"]

    if selected == correct:
        progress["correct_answers"] += 1
        await callback.message.answer("‚úÖ –í–µ—Ä–Ω–æ!")
        progress["current_question"] += 1
        await callback.answer()
        await asyncio.sleep(1)
        if progress["current_question"] < len(questions):
            await send_question(callback.message, user_id)
        else:
            await finish_quiz(callback.message, user_id)
    else:
        progress["attempts"] -= 1
        if progress["attempts"] > 0:
            await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. –û—Å—Ç–∞–ª–∞—Å—å 1 –ø–æ–ø—ã—Ç–∫–∞.")
            await callback.answer()
        else:
            await callback.message.answer(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{questions[question_index]['options'][correct]}</b>",
                parse_mode="HTML"
            )
            progress["current_question"] += 1
            await callback.answer()
            await asyncio.sleep(1)
            if progress["current_question"] < len(questions):
                await send_question(callback.message, user_id)
            else:
                await finish_quiz(callback.message, user_id)


async def finish_quiz(message, user_id):
    score = user_progress[user_id]["correct_answers"]
    total = len(questions)
    await message.answer(
    f"‚ú® –¢—ã –ø—Ä–æ—à—ë–ª —Ç–µ—Å—Ç! –†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{score}/{total}</b>\n"
    "–¢—ã –ø—Ä–æ—à—ë–ª –∏—Å–ø—ã—Ç–∞–Ω–∏–µ.\n"
    "–ì–µ–∫–∞—Ç–∞ –¥–æ–≤–æ–ª—å–Ω–∞.\n"
    "–û–Ω–∞ –¥–∞—Ä–∏—Ç —Ç–µ–±–µ —Å–≤–æ–π —Å–∏–º–≤–æ–ª ‚Äî –∑–Ω–∞–∫ —Å–∏–ª—ã, –∑–∞—â–∏—Ç—ã –∏ –º—É–¥—Ä–æ—Å—Ç–∏.\n"
    "üîÆ <b>–ü—Ä–∏–º–∏ –¥–∞—Ä ‚Äî –∏ –∏–¥–∏ –¥–∞–ª—å—à–µ –ø–æ –ø—É—Ç–∏ –¢–µ–Ω–∏‚Ä¶</b>\n\n"
    "–°–ø—Ä–æ—Å–∏ –µ–≥–æ —É –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –∏ –ø–æ–∫–∞–∂–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
    parse_mode="HTML"
)
    del user_progress[user_id]
    await asyncio.sleep(1)
